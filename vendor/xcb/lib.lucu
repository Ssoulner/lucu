import "vendor:c"
import "bindings"

# re-export binding types
type keycode = u8
type window = bindings.window
type colormap = bindings.colormap
type visualid = bindings.visualid
type setup = bindings.setup
type screen_iterator = bindings.screen_iterator
type screen = bindings.screen

effect lib {
	fun connect(displayname ?c.string, screenp ?^c.int) impl conn
	fun traverse_roots(setup ^setup) / yield(^screen)
}

effect conn {
	fun disconnect()
	fun get_setup() ^setup
}

@capability
fun link() impl lib / foreign {
	impl lib {
		fun connect(displayname ?c.string, screenp ?^c.int) impl conn {
			let conn = bindings.connect(displayname, screenp)
			impl conn {
				fun disconnect() { bindings.disconnect(conn) }
				fun get_setup () { bindings.get_setup(conn)  }
			}
		}
		fun traverse_roots(setup ^setup) / yield(^screen) {
			mut iter = bindings.setup_roots_iterator(setup)
			try loop {
				if iter.rem < 0 {
					break
				} else {
					yield(iter.data)
					bindings.screen_next(&iter)
				}
			}
		}
	} with bindings.link()
}
