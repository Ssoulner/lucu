##
# everything in this file is always in scope
##

import "io"

##
# crude way of reading and writing data
# defined for the main function
##
effect debug {
	fun putint(n int)
	fun putstr(s str)
	fun wait()
}

@capability
fun debug() debug / io.stdio {
	let in = io.stdin()
	let out = io.stdout()
	handle debug {
		fun putint(n int) {
			with out {
				io.write_int(n)
				io.write("\n");
			}
		}
		fun putstr(s str) {
			with out {
				io.write(cast s);
			}
		}
		fun wait() {
			with in {
				io.skip_line();
			}
		}
	}
}

##
# panics with message if the assertion is not met
# preferred to be used only for debugging
##
fun assert(all bool, msg str) {
	if all {
	} else { # fails
		panic(msg)
	}
}

##
# modulo operator
##
fun mod(dividend int, divisor int) int {
	dividend - ((dividend / divisor) * divisor)
}

##
# implicit break effect
# breaks up to the nearest try block
##
effect break {
	fun break() !
}

handle break fails {
	fun break() ! {
		fail
	}
}

##
# basic ranged for loop
##
fun for(start usize, end usize, fn consume fails) {
	mut n = start
	with fn loop {
		if n == end {
			break()
		} else {
			consume(n++)
		}
	}
}

effect consume {
	fun consume(n usize)
}

##
# the following functions have internal definitions
# these are not based on a specific target
##

##
# marks that a code path is unreachable
# this function should NEVER actually be called
# for displaying an error, &panic is preferred
##
fun unreachable() ! {
	# internally defined
	loop {}
}

##
# returns the length of a slice
##
fun len(slice []u8) usize {
	# internally defined
	---
}

##
# the following functions may have an internal definition based on the target
# they also have default implementations for unknown targets
##

##
# function that ends execution of the entire program
# the way it ends execution depends on the target
# for instance, it could:
#  - end the process
#  - run a halt instruction
#  - throw an exception / interrupt
#  - spin forever
##
fun trap() ! {
	# internally defined based on target
	loop {}
}

##
# exits the program and displays an error
# preferred to be used only for debugging
##
fun panic(msg str) ! {
	# internally defined based on target
	trap()
}
