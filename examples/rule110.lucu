import "core:sys/unix"

fun main() / debug unix.sys {
	# create buffers
	mut state [64]u8 = 0
	mut state = state[0..64]

	mut next [64]u8 = ---
	mut next = next[0..64]

	# init state
	state[63] = 1

	loop {
		# print state
		print_state(state)

		# wait for stdin
		unix.read([---])

		# get next state
		next_state(state, next)

		# swap buffers
		mut tmp = state
		state = next
		next = tmp
	}
}

fun rule(l u8, m u8, r u8) u8 {
	let rule [8]u8 = [0, 1, 1, 1, 0, 1, 1, 0]
	let num = (l * 4) + (m * 2) + (r * 1)
	rule[cast num]
}

fun next_state(original []u8, mut next []u8) {
	assert(len(next) == len(original), "states do not have the same length")
	assert(len(next) > 1,              "states must have at least two cells")
	let len = len(next)

	# first index
	next[0] = rule(original[len - 1], original[0], original[1])

	# middle indices
	mut cur usize = 1
	try loop {
		if cur == len - 1 {
			break()
		}
		next[cur] = rule(original[cur - 1], original[cur], original[cur + 1])
		cur++
	}

	# last index
	next[len - 1] = rule(original[len - 2], original[len - 1], original[0])
}

fun print_state(state []u8) / debug {
	mut current usize = 0
	try loop {
		if current == len(state) {
			break()
		}

		if state[current++] == 0 {
			putstr(" ")
		} else {
			putstr("X")
		}
	}
}
